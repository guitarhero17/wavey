function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(children(options.target));
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

/* src\Circle.svelte generated by Svelte v3.19.2 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1fgt3j0-style";
	style.textContent = ".circle.svelte-1fgt3j0{height:var(--size);width:var(--size);border-color:var(--color) transparent var(--color) var(--color);border-width:calc(var(--size) / 15);border-style:solid;border-image:initial;border-radius:50%;animation:var(--duration) linear 0s infinite normal none running svelte-1fgt3j0-rotate}@keyframes svelte-1fgt3j0-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "circle svelte-1fgt3j0");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "0.75s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class Circle extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1fgt3j0-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Circle2.svelte generated by Svelte v3.19.2 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-92ktqf-style";
	style.textContent = ".circle.svelte-92ktqf{width:var(--size);height:var(--size);box-sizing:border-box;position:relative;border:3px solid transparent;border-top-color:var(--colorOuter);border-radius:50%;animation:svelte-92ktqf-circleSpin var(--durationOuter) linear infinite}.circle.svelte-92ktqf:before,.circle.svelte-92ktqf:after{content:\"\";box-sizing:border-box;position:absolute;border:3px solid transparent;border-radius:50%}.circle.svelte-92ktqf:after{border-top-color:var(--colorInner);top:9px;left:9px;right:9px;bottom:9px;animation:svelte-92ktqf-circleSpin var(--durationInner) linear infinite}.circle.svelte-92ktqf:before{border-top-color:var(--colorCenter);top:3px;left:3px;right:3px;bottom:3px;animation:svelte-92ktqf-circleSpin var(--durationCenter) linear infinite}@keyframes svelte-92ktqf-circleSpin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "circle svelte-92ktqf");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[1]);
			set_style(div, "--colorInner", /*colorInner*/ ctx[4]);
			set_style(div, "--colorCenter", /*colorCenter*/ ctx[3]);
			set_style(div, "--colorOuter", /*colorOuter*/ ctx[2]);
			set_style(div, "--durationInner", /*durationInner*/ ctx[6]);
			set_style(div, "--durationCenter", /*durationCenter*/ ctx[7]);
			set_style(div, "--durationOuter", /*durationOuter*/ ctx[5]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 3) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[1]);
			}

			if (dirty & /*colorInner*/ 16) {
				set_style(div, "--colorInner", /*colorInner*/ ctx[4]);
			}

			if (dirty & /*colorCenter*/ 8) {
				set_style(div, "--colorCenter", /*colorCenter*/ ctx[3]);
			}

			if (dirty & /*colorOuter*/ 4) {
				set_style(div, "--colorOuter", /*colorOuter*/ ctx[2]);
			}

			if (dirty & /*durationInner*/ 64) {
				set_style(div, "--durationInner", /*durationInner*/ ctx[6]);
			}

			if (dirty & /*durationCenter*/ 128) {
				set_style(div, "--durationCenter", /*durationCenter*/ ctx[7]);
			}

			if (dirty & /*durationOuter*/ 32) {
				set_style(div, "--durationOuter", /*durationOuter*/ ctx[5]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { unit = "px" } = $$props;
	let { colorOuter = "#FF3E00" } = $$props;
	let { colorCenter = "#40B3FF" } = $$props;
	let { colorInner = "#676778" } = $$props;
	let { durationMultiplier = 1 } = $$props;
	let { durationOuter = `${durationMultiplier * 2}s` } = $$props;
	let { durationInner = `${durationMultiplier * 1.5}s` } = $$props;
	let { durationCenter = `${durationMultiplier * 3}s` } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("unit" in $$props) $$invalidate(1, unit = $$props.unit);
		if ("colorOuter" in $$props) $$invalidate(2, colorOuter = $$props.colorOuter);
		if ("colorCenter" in $$props) $$invalidate(3, colorCenter = $$props.colorCenter);
		if ("colorInner" in $$props) $$invalidate(4, colorInner = $$props.colorInner);
		if ("durationMultiplier" in $$props) $$invalidate(8, durationMultiplier = $$props.durationMultiplier);
		if ("durationOuter" in $$props) $$invalidate(5, durationOuter = $$props.durationOuter);
		if ("durationInner" in $$props) $$invalidate(6, durationInner = $$props.durationInner);
		if ("durationCenter" in $$props) $$invalidate(7, durationCenter = $$props.durationCenter);
	};

	return [
		size,
		unit,
		colorOuter,
		colorCenter,
		colorInner,
		durationOuter,
		durationInner,
		durationCenter,
		durationMultiplier
	];
}

class Circle2 extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-92ktqf-style")) add_css$1();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			size: 0,
			unit: 1,
			colorOuter: 2,
			colorCenter: 3,
			colorInner: 4,
			durationMultiplier: 8,
			durationOuter: 5,
			durationInner: 6,
			durationCenter: 7
		});
	}
}

/* src\Circle3.svelte generated by Svelte v3.19.2 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-yxps3a-style";
	style.textContent = ".wrapper.svelte-yxps3a{width:var(--size);height:var(--size);display:flex;justify-content:center;align-items:center;line-height:0;box-sizing:border-box}.inner.svelte-yxps3a{transform:scale(calc(var(--floatSize) / 52))}.ball-container.svelte-yxps3a{animation:svelte-yxps3a-ballTwo var(--duration) infinite;width:44px;height:44px;flex-shrink:0;position:relative}.single-ball.svelte-yxps3a{width:44px;height:44px;position:absolute}.ball.svelte-yxps3a{width:20px;height:20px;border-radius:50%;position:absolute;animation:svelte-yxps3a-ballOne var(--duration) infinite ease}.ball-top-left.svelte-yxps3a{background-color:var(--ballTopLeftColor);top:0;left:0}.ball-top-right.svelte-yxps3a{background-color:var(--ballTopRightColor);top:0;left:24px}.ball-bottom-left.svelte-yxps3a{background-color:var(--ballBottomLeftColor);top:24px;left:0}.ball-bottom-right.svelte-yxps3a{background-color:var(--ballBottomRightColor);top:24px;left:24px}@keyframes svelte-yxps3a-ballOne{0%{position:absolute}50%{top:12px;left:12px;position:absolute;opacity:0.5}100%{position:absolute}}@keyframes svelte-yxps3a-ballTwo{0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(360deg) scale(1.3)}100%{transform:rotate(720deg) scale(1)}}";
	append(document.head, style);
}

function create_fragment$2(ctx) {
	let div10;
	let div9;

	return {
		c() {
			div10 = element("div");
			div9 = element("div");

			div9.innerHTML = `<div class="ball-container svelte-yxps3a"><div class="single-ball svelte-yxps3a"><div class="ball ball-top-left svelte-yxps3a"> </div></div> 
      <div class="contener_mixte"><div class="ball ball-top-right svelte-yxps3a"> </div></div> 
      <div class="contener_mixte"><div class="ball ball-bottom-left svelte-yxps3a"> </div></div> 
      <div class="contener_mixte"><div class="ball ball-bottom-right svelte-yxps3a"> </div></div></div>`;

			attr(div9, "class", "inner svelte-yxps3a");
			attr(div10, "class", "wrapper svelte-yxps3a");
			set_style(div10, "--size", /*size*/ ctx[0] + /*unit*/ ctx[1]);
			set_style(div10, "--floatSize", /*size*/ ctx[0]);
			set_style(div10, "--ballTopLeftColor", /*ballTopLeft*/ ctx[2]);
			set_style(div10, "--ballTopRightColor", /*ballTopRight*/ ctx[3]);
			set_style(div10, "--ballBottomLeftColor", /*ballBottomLeft*/ ctx[4]);
			set_style(div10, "--ballBottomRightColor", /*ballBottomRight*/ ctx[5]);
			set_style(div10, "--duration", /*duration*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, div10, anchor);
			append(div10, div9);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 3) {
				set_style(div10, "--size", /*size*/ ctx[0] + /*unit*/ ctx[1]);
			}

			if (dirty & /*size*/ 1) {
				set_style(div10, "--floatSize", /*size*/ ctx[0]);
			}

			if (dirty & /*ballTopLeft*/ 4) {
				set_style(div10, "--ballTopLeftColor", /*ballTopLeft*/ ctx[2]);
			}

			if (dirty & /*ballTopRight*/ 8) {
				set_style(div10, "--ballTopRightColor", /*ballTopRight*/ ctx[3]);
			}

			if (dirty & /*ballBottomLeft*/ 16) {
				set_style(div10, "--ballBottomLeftColor", /*ballBottomLeft*/ ctx[4]);
			}

			if (dirty & /*ballBottomRight*/ 32) {
				set_style(div10, "--ballBottomRightColor", /*ballBottomRight*/ ctx[5]);
			}

			if (dirty & /*duration*/ 64) {
				set_style(div10, "--duration", /*duration*/ ctx[6]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div10);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { unit = "px" } = $$props;
	let { ballTopLeft = "#FF3E00" } = $$props;
	let { ballTopRight = "#F8B334" } = $$props;
	let { ballBottomLeft = "#40B3FF" } = $$props;
	let { ballBottomRight = "#676778" } = $$props;
	let { duration = "1.5s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("unit" in $$props) $$invalidate(1, unit = $$props.unit);
		if ("ballTopLeft" in $$props) $$invalidate(2, ballTopLeft = $$props.ballTopLeft);
		if ("ballTopRight" in $$props) $$invalidate(3, ballTopRight = $$props.ballTopRight);
		if ("ballBottomLeft" in $$props) $$invalidate(4, ballBottomLeft = $$props.ballBottomLeft);
		if ("ballBottomRight" in $$props) $$invalidate(5, ballBottomRight = $$props.ballBottomRight);
		if ("duration" in $$props) $$invalidate(6, duration = $$props.duration);
	};

	return [
		size,
		unit,
		ballTopLeft,
		ballTopRight,
		ballBottomLeft,
		ballBottomRight,
		duration
	];
}

class Circle3 extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-yxps3a-style")) add_css$2();

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			size: 0,
			unit: 1,
			ballTopLeft: 2,
			ballTopRight: 3,
			ballBottomLeft: 4,
			ballBottomRight: 5,
			duration: 6
		});
	}
}

const durationUnitRegex = /[a-zA-Z]/;

const calculateRgba = (input, opacity) => {
  let color;
  if (input[0] === `#`) {
    color = input.slice(1);
  }

  if (color.length === 3) {
    let res = ``;
    color.split(``).forEach(c => {
      res += c;
      res += c;
    });
    color = res;
  }

  const rgbValues = color
    .match(/.{2}/g)
    .map(hex => parseInt(hex, 16))
    .join(`, `);
  return `rgba(${rgbValues}, ${opacity})`;
};

const range = (size, startAt = 0) =>
  [...Array(size).keys()].map(i => i + startAt);

/* src\DoubleBounce.svelte generated by Svelte v3.19.2 */

function add_css$3() {
	var style = element("style");
	style.id = "svelte-cwiakx-style";
	style.textContent = ".wrapper.svelte-cwiakx{position:relative;width:var(--size);height:var(--size)}.circle.svelte-cwiakx{position:absolute;width:var(--size);height:var(--size);background-color:var(--color);border-radius:100%;opacity:0.6;top:0;left:0;animation-fill-mode:both;animation-name:svelte-cwiakx-bounce !important}@keyframes svelte-cwiakx-bounce{0%,100%{transform:scale(0)}50%{transform:scale(1)}}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (42:2) {#each range(2, 1) as version}
function create_each_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "circle svelte-cwiakx");

			set_style(div, "animation", /*duration*/ ctx[3] + " " + (/*version*/ ctx[6] === 1
			? `${(/*durationNum*/ ctx[5] - 0.1) / 2}${/*durationUnit*/ ctx[4]}`
			: `0s`) + " infinite ease-in-out");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*duration*/ 8) {
				set_style(div, "animation", /*duration*/ ctx[3] + " " + (/*version*/ ctx[6] === 1
				? `${(/*durationNum*/ ctx[5] - 0.1) / 2}${/*durationUnit*/ ctx[4]}`
				: `0s`) + " infinite ease-in-out");
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$3(ctx) {
	let div;
	let each_value = range(2, 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-cwiakx");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*duration, range, durationNum, durationUnit*/ 56) {
				each_value = range(2, 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "2.1s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class DoubleBounce extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-cwiakx-style")) add_css$3();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\GoogleSpin.svelte generated by Svelte v3.19.2 */

function add_css$4() {
	var style = element("style");
	style.id = "svelte-hc4l1g-style";
	style.textContent = ".svelte-hc4l1g{overflow:hidden;position:relative;text-indent:-9999px;display:inline-block;background:#f86;border-radius:50%;transform:rotateZ(90deg);transform-origin:50% 50%;animation:svelte-hc4l1g-plus-loader-background var(--duration) infinite ease-in-out}.svelte-hc4l1g:after{background:#f86;border-radius:50% 0 0 50%;content:\"\";position:absolute;right:50%;top:0;width:50%;height:100%;transform-origin:100% 50%;animation:svelte-hc4l1g-plus-loader-top var(--duration) infinite linear}.svelte-hc4l1g:before{background:#fc6;border-radius:50% 0 0 50%;content:\"\";position:absolute;right:50%;top:0;width:50%;height:100%;transform-origin:100% 50%;animation:svelte-hc4l1g-plus-loader-bottom var(--duration) infinite linear}@keyframes svelte-hc4l1g-plus-loader-top{2.5%{background:#f86;transform:rotateY(0deg);animation-timing-function:ease-in}13.75%{background:#ff430d;transform:rotateY(90deg);animation-timing-function:step-start}13.76%{background:#ffae0d;transform:rotateY(90deg);animation-timing-function:ease-out}25%{background:#fc6;transform:rotateY(180deg)}27.5%{background:#fc6;transform:rotateY(180deg);animation-timing-function:ease-in}41.25%{background:#ffae0d;transform:rotateY(90deg);animation-timing-function:step-start}41.26%{background:#2cc642;transform:rotateY(90deg);animation-timing-function:ease-out}50%{background:#6d7;transform:rotateY(0deg)}52.5%{background:#6d7;transform:rotateY(0deg);animation-timing-function:ease-in}63.75%{background:#2cc642;transform:rotateY(90deg);animation-timing-function:step-start}63.76%{background:#1386d2;transform:rotateY(90deg);animation-timing-function:ease-out}75%{background:#4ae;transform:rotateY(180deg)}77.5%{background:#4ae;transform:rotateY(180deg);animation-timing-function:ease-in}91.25%{background:#1386d2;transform:rotateY(90deg);animation-timing-function:step-start}91.26%{background:#ff430d;transform:rotateY(90deg);animation-timing-function:ease-in}100%{background:#f86;transform:rotateY(0deg);animation-timing-function:step-start}}@keyframes svelte-hc4l1g-plus-loader-bottom{0%{background:#fc6;animation-timing-function:step-start}50%{background:#fc6;animation-timing-function:step-start}75%{background:#4ae;animation-timing-function:step-start}100%{background:#4ae;animation-timing-function:step-start}}@keyframes svelte-hc4l1g-plus-loader-background{0%{background:#f86;transform:rotateZ(180deg)}25%{background:#f86;transform:rotateZ(180deg);animation-timing-function:step-start}27.5%{background:#6d7;transform:rotateZ(90deg)}50%{background:#6d7;transform:rotateZ(90deg);animation-timing-function:step-start}52.5%{background:#6d7;transform:rotateZ(0deg)}75%{background:#6d7;transform:rotateZ(0deg);animation-timing-function:step-start}77.5%{background:#f86;transform:rotateZ(270deg)}100%{background:#f86;transform:rotateZ(270deg);animation-timing-function:step-start}}";
	append(document.head, style);
}

function create_fragment$4(ctx) {
	let div;
	let div_style_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", "spinner spinner--google svelte-hc4l1g");
			attr(div, "style", div_style_value = "--duration: " + /*duration*/ ctx[0] + "; " + /*styles*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*duration, styles*/ 3 && div_style_value !== (div_style_value = "--duration: " + /*duration*/ ctx[0] + "; " + /*styles*/ ctx[1])) {
				attr(div, "style", div_style_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let { size = "40px" } = $$props;
	let { duration = "3s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(2, size = $$props.size);
		if ("duration" in $$props) $$invalidate(0, duration = $$props.duration);
	};

	let styles;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*size*/ 4) {
			 $$invalidate(1, styles = [`width: ${size}`, `height: ${size}`].join(";"));
		}
	};

	return [duration, styles, size];
}

class GoogleSpin extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-hc4l1g-style")) add_css$4();
		init(this, options, instance$4, create_fragment$4, safe_not_equal, { size: 2, duration: 0 });
	}
}

/* src\ScaleOut.svelte generated by Svelte v3.19.2 */

function add_css$5() {
	var style = element("style");
	style.id = "svelte-hf9ydw-style";
	style.textContent = ".wrapper.svelte-hf9ydw{width:var(--size);height:var(--size)}.circle.svelte-hf9ydw{width:var(--size);height:var(--size);background-color:var(--color);animation-duration:var(--duration);border-radius:100%;display:inline-block;animation:svelte-hf9ydw-scaleOut var(--duration) ease-in-out infinite}@keyframes svelte-hf9ydw-scaleOut{0%{transform:scale(0)}100%{transform:scale(1);opacity:0}}";
	append(document.head, style);
}

function create_fragment$5(ctx) {
	let div1;
	let div0;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "circle svelte-hf9ydw");
			attr(div1, "class", "wrapper svelte-hf9ydw");
			set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div1, "--color", /*color*/ ctx[1]);
			set_style(div1, "--duration", /*duration*/ ctx[3]);
			set_style(div1, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div1, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div1, "--duration", /*duration*/ ctx[3]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div1, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class ScaleOut extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-hf9ydw-style")) add_css$5();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\SpinLine.svelte generated by Svelte v3.19.2 */

function add_css$6() {
	var style = element("style");
	style.id = "svelte-1viuzhq-style";
	style.textContent = ".wrapper.svelte-1viuzhq{width:var(--size);height:var(--stroke);transform:scale(calc(var(--floatSize) / 75));display:flex;justify-content:center;align-items:center}.line.svelte-1viuzhq{width:var(--size);height:var(--stroke);background:var(--color);border-radius:var(--stroke);transform-origin:center center;animation:svelte-1viuzhq-spineLine var(--duration) ease infinite}@keyframes svelte-1viuzhq-spineLine{0%{transform:rotate(-20deg);height:5px;width:75px}5%{height:5px;width:75px}30%{transform:rotate(380deg);height:5px;width:75px}40%{transform:rotate(360deg);height:5px;width:75px}55%{transform:rotate(0deg);height:5px;width:5px}65%{transform:rotate(0deg);height:5px;width:85px}68%{transform:rotate(0deg);height:5px}75%{transform:rotate(0deg);height:5px;width:1px}78%{height:5px;width:5px}90%{height:5px;width:75px;transform:rotate(0deg)}99%,100%{height:5px;width:75px;transform:rotate(-20deg)}}";
	append(document.head, style);
}

function create_fragment$6(ctx) {
	let div1;
	let div0;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "line svelte-1viuzhq");
			attr(div1, "class", "wrapper svelte-1viuzhq");
			set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div1, "--color", /*color*/ ctx[1]);
			set_style(div1, "--stroke", /*stroke*/ ctx[3]);
			set_style(div1, "--floatSize", /*size*/ ctx[0]);
			set_style(div1, "--duration", /*duration*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div1, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*stroke*/ 8) {
				set_style(div1, "--stroke", /*stroke*/ ctx[3]);
			}

			if (dirty & /*size*/ 1) {
				set_style(div1, "--floatSize", /*size*/ ctx[0]);
			}

			if (dirty & /*duration*/ 16) {
				set_style(div1, "--duration", /*duration*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { stroke = parseInt(size / 12) + unit } = $$props;
	let { duration = "4s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("stroke" in $$props) $$invalidate(3, stroke = $$props.stroke);
		if ("duration" in $$props) $$invalidate(4, duration = $$props.duration);
	};

	return [size, color, unit, stroke, duration];
}

class SpinLine extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1viuzhq-style")) add_css$6();

		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
			size: 0,
			color: 1,
			unit: 2,
			stroke: 3,
			duration: 4
		});
	}
}

/* src\Stretch.svelte generated by Svelte v3.19.2 */

function add_css$7() {
	var style = element("style");
	style.id = "svelte-w0x6cj-style";
	style.textContent = ".wrapper.svelte-w0x6cj{height:var(--size);width:var(--size);display:inline-block;text-align:center;font-size:10px}.rect.svelte-w0x6cj{height:100%;width:10%;display:inline-block;margin-right:4px;background-color:var(--color);animation:svelte-w0x6cj-stretch var(--duration) ease-in-out infinite}@keyframes svelte-w0x6cj-stretch{0%,40%,100%{transform:scaleY(0.4)}20%{transform:scaleY(1)}}";
	append(document.head, style);
}

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (45:2) {#each range(5, 1) as version}
function create_each_block$1(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "rect svelte-w0x6cj");
			set_style(div, "animation-delay", (/*version*/ ctx[6] - 1) * (/*durationNum*/ ctx[5] / 12) + /*durationUnit*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$7(ctx) {
	let div;
	let each_value = range(5, 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-w0x6cj");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[3]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range, durationNum, durationUnit*/ 48) {
				each_value = range(5, 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 9) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[3]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 4) {
				set_style(div, "--duration", /*duration*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$7($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { duration = "1.2s" } = $$props;
	let { unit = "px" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("duration" in $$props) $$invalidate(2, duration = $$props.duration);
		if ("unit" in $$props) $$invalidate(3, unit = $$props.unit);
	};

	return [size, color, duration, unit, durationUnit, durationNum];
}

class Stretch extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-w0x6cj-style")) add_css$7();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { size: 0, color: 1, duration: 2, unit: 3 });
	}
}

/* src\BarLoader.svelte generated by Svelte v3.19.2 */

function add_css$8() {
	var style = element("style");
	style.id = "svelte-1h8zs46-style";
	style.textContent = ".wrapper.svelte-1h8zs46{height:calc(var(--size) / 15);width:calc(var(--size) * 2);background-color:var(--rgba);position:relative;overflow:hidden;background-clip:padding-box}.lines.svelte-1h8zs46{height:calc(var(--size) / 15);background-color:var(--color)}.small-lines.svelte-1h8zs46{position:absolute;overflow:hidden;background-clip:padding-box;display:block;border-radius:2px;will-change:left, right;animation-fill-mode:forwards}.small-lines.\\31 .svelte-1h8zs46{animation:var(--duration) cubic-bezier(0.65, 0.815, 0.735, 0.395) 0s infinite normal\r\n      none running svelte-1h8zs46-long}.small-lines.\\32 .svelte-1h8zs46{animation:var(--duration) cubic-bezier(0.165, 0.84, 0.44, 1) calc((var(--duration)+0.1)/2) infinite normal\r\n      none running svelte-1h8zs46-short}@keyframes svelte-1h8zs46-long{0%{left:-35%;right:100%}60%{left:100%;right:-90%}100%{left:100%;right:-90%}}@keyframes svelte-1h8zs46-short{0%{left:-200%;right:100%}60%{left:107%;right:-8%}100%{left:107%;right:-8%}}";
	append(document.head, style);
}

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (73:2) {#each range(2, 1) as version}
function create_each_block$2(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "lines small-lines " + /*version*/ ctx[5] + " svelte-1h8zs46");
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$8(ctx) {
	let div;
	let each_value = range(2, 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-1h8zs46");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--rgba", /*rgba*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range, color, duration*/ 10) {
				each_value = range(2, 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*rgba*/ 16) {
				set_style(div, "--rgba", /*rgba*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "2.1s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	let rgba;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color*/ 2) {
			 $$invalidate(4, rgba = calculateRgba(color, 0.2));
		}
	};

	return [size, color, unit, duration, rgba];
}

class BarLoader extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1h8zs46-style")) add_css$8();
		init(this, options, instance$8, create_fragment$8, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Jumper.svelte generated by Svelte v3.19.2 */

function add_css$9() {
	var style = element("style");
	style.id = "svelte-1v42ioj-style";
	style.textContent = ".wrapper.svelte-1v42ioj{width:var(--size);height:var(--size)}.circle.svelte-1v42ioj{border-radius:100%;animation-fill-mode:both;position:absolute;opacity:0;width:var(--size);height:var(--size);background-color:var(--color);animation:svelte-1v42ioj-bounce var(--duration) linear infinite}@keyframes svelte-1v42ioj-bounce{0%{opacity:0;transform:scale(0)}5%{opacity:1}100%{opacity:0;transform:scale(1)}}";
	append(document.head, style);
}

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (43:2) {#each range(3, 1) as version}
function create_each_block$3(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "circle svelte-1v42ioj");
			set_style(div, "animation-delay", /*durationNum*/ ctx[5] / 3 * (/*version*/ ctx[6] - 1) + /*durationUnit*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$9(ctx) {
	let div;
	let each_value = range(3, 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-1v42ioj");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*durationNum, range, durationUnit*/ 48) {
				each_value = range(3, 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class Jumper extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1v42ioj-style")) add_css$9();
		init(this, options, instance$9, create_fragment$9, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\RingLoader.svelte generated by Svelte v3.19.2 */

function add_css$a() {
	var style = element("style");
	style.id = "svelte-ihyvhn-style";
	style.textContent = ".wrapper.svelte-ihyvhn{position:relative;width:var(--size);height:var(--size)}.border.svelte-ihyvhn{border-color:var(--color);position:absolute;top:0px;left:0px;width:var(--size);height:var(--size);opacity:0.4;perspective:800px;border-width:6px;border-style:solid;border-image:initial;border-radius:100%}.border.\\31 .svelte-ihyvhn{animation:var(--duration) linear 0s infinite normal none running svelte-ihyvhn-ringOne}.border.\\32 .svelte-ihyvhn{animation:var(--duration) linear 0s infinite normal none running svelte-ihyvhn-ringTwo}@keyframes svelte-ihyvhn-ringOne{0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(360deg) rotateY(180deg) rotateZ(360deg)}}@keyframes svelte-ihyvhn-ringTwo{0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(180deg) rotateY(360deg) rotateZ(360deg)}}";
	append(document.head, style);
}

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (55:2) {#each range(2, 1) as version}
function create_each_block$4(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "border " + /*version*/ ctx[4] + " svelte-ihyvhn");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$a(ctx) {
	let div;
	let each_value = range(2, 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-ihyvhn");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range*/ 0) {
				each_value = range(2, 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "2s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class RingLoader extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-ihyvhn-style")) add_css$a();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\SyncLoader.svelte generated by Svelte v3.19.2 */

function add_css$b() {
	var style = element("style");
	style.id = "svelte-1meein0-style";
	style.textContent = ".wrapper.svelte-1meein0{height:var(--size);width:var(--size);display:flex;align-items:center;justify-content:center}.dot.svelte-1meein0{height:var(--dotSize);width:var(--dotSize);background-color:var(--color);margin:2px;display:inline-block;border-radius:100%;animation:svelte-1meein0-sync var(--duration) ease-in-out infinite alternate both running}@-webkit-keyframes svelte-1meein0-sync{33%{-webkit-transform:translateY(10px);transform:translateY(10px)}66%{-webkit-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes svelte-1meein0-sync{33%{-webkit-transform:translateY(10px);transform:translateY(10px)}66%{-webkit-transform:translateY(-10px);transform:translateY(-10px)}100%{-webkit-transform:translateY(0);transform:translateY(0)}}";
	append(document.head, style);
}

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (62:2) {#each range(3, 1) as i}
function create_each_block$5(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "dot svelte-1meein0");
			set_style(div, "--dotSize", /*size*/ ctx[0] * 0.25 + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "animation-delay", /*i*/ ctx[6] * (/*durationNum*/ ctx[5] / 10) + /*durationUnit*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--dotSize", /*size*/ ctx[0] * 0.25 + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$b(ctx) {
	let div;
	let each_value = range(3, 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-1meein0");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit, color, range, durationNum, durationUnit*/ 55) {
				each_value = range(3, 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$b($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "0.6s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class SyncLoader extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1meein0-style")) add_css$b();
		init(this, options, instance$b, create_fragment$b, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Rainbow.svelte generated by Svelte v3.19.2 */

function add_css$c() {
	var style = element("style");
	style.id = "svelte-19yho4w-style";
	style.textContent = ".wrapper.svelte-19yho4w{width:var(--size);height:calc(var(--size) / 2);overflow:hidden}.rainbow.svelte-19yho4w{width:var(--size);height:var(--size);border-left-color:transparent;border-bottom-color:transparent;border-top-color:var(--color);border-right-color:var(--color);box-sizing:border-box;transform:rotate(-200deg);border-radius:50%;border-style:solid;animation:var(--duration) ease-in-out 0s infinite normal none running svelte-19yho4w-rotate}@keyframes svelte-19yho4w-rotate{0%{border-width:10px}25%{border-width:3px}50%{transform:rotate(115deg);border-width:10px}75%{border-width:3px}100%{border-width:10px}}";
	append(document.head, style);
}

function create_fragment$c(ctx) {
	let div1;
	let div0;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "rainbow svelte-19yho4w");
			attr(div1, "class", "wrapper svelte-19yho4w");
			set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div1, "--color", /*color*/ ctx[1]);
			set_style(div1, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div1, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div1, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance$c($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "3s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class Rainbow extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-19yho4w-style")) add_css$c();
		init(this, options, instance$c, create_fragment$c, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Wave.svelte generated by Svelte v3.19.2 */

function add_css$d() {
	var style = element("style");
	style.id = "svelte-1l12hh6-style";
	style.textContent = ".wrapper.svelte-1l12hh6{position:relative;display:flex;justify-content:center;align-items:center;width:calc(var(--size) * 2.5);height:var(--size);overflow:hidden}.bar.svelte-1l12hh6{position:absolute;top:calc(var(--size) / 10);width:calc(var(--size) / 5);height:calc(var(--size) / 10);margin-top:calc(var(--size) - var(--size) / 10);transform:skewY(0deg);background-color:var(--color);animation:svelte-1l12hh6-motion var(--duration) ease-in-out infinite}@keyframes svelte-1l12hh6-motion{25%{transform:skewY(25deg)}50%{height:100%;margin-top:0}75%{transform:skewY(-25deg)}}";
	append(document.head, style);
}

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (45:2) {#each range(10, 0) as version}
function create_each_block$6(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "bar svelte-1l12hh6");
			set_style(div, "left", /*version*/ ctx[6] * (/*size*/ ctx[0] / 5 + (/*size*/ ctx[0] / 15 - /*size*/ ctx[0] / 100)) + /*unit*/ ctx[2]);
			set_style(div, "animation-delay", /*version*/ ctx[6] * (/*durationNum*/ ctx[5] / 8.3) + /*durationUnit*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div, "left", /*version*/ ctx[6] * (/*size*/ ctx[0] / 5 + (/*size*/ ctx[0] / 15 - /*size*/ ctx[0] / 100)) + /*unit*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$d(ctx) {
	let div;
	let each_value = range(10, 0);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-1l12hh6");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range, size, unit, durationNum, durationUnit*/ 53) {
				each_value = range(10, 0);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$d($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1.25s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class Wave extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1l12hh6-style")) add_css$d();
		init(this, options, instance$d, create_fragment$d, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Firework.svelte generated by Svelte v3.19.2 */

function add_css$e() {
	var style = element("style");
	style.id = "svelte-1go2d9c-style";
	style.textContent = ".wrapper.svelte-1go2d9c{width:calc(var(--size) * 1.3);height:calc(var(--size) * 1.3);display:flex;justify-content:center;align-items:center}.firework.svelte-1go2d9c{border:calc(var(--size) / 10) dotted var(--color);width:var(--size);height:var(--size);border-radius:50%;animation:svelte-1go2d9c-fire var(--duration) cubic-bezier(0.165, 0.84, 0.44, 1) infinite}@keyframes svelte-1go2d9c-fire{0%{opacity:1;transform:scale(0.1)}25%{opacity:0.85}100%{transform:scale(1);opacity:0}}";
	append(document.head, style);
}

function create_fragment$e(ctx) {
	let div1;
	let div0;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "firework svelte-1go2d9c");
			attr(div1, "class", "wrapper svelte-1go2d9c");
			set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div1, "--color", /*color*/ ctx[1]);
			set_style(div1, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div1, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div1, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1.25s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class Firework extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1go2d9c-style")) add_css$e();
		init(this, options, instance$e, create_fragment$e, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Pulse.svelte generated by Svelte v3.19.2 */

function add_css$f() {
	var style = element("style");
	style.id = "svelte-qjpt5m-style";
	style.textContent = ".wrapper.svelte-qjpt5m{position:relative;display:flex;justify-content:center;align-items:center;width:var(--size);height:calc(var(--size) / 2.5)}.cube.svelte-qjpt5m{position:absolute;top:0px;width:calc(var(--size) / 5);height:calc(var(--size) / 2.5);background-color:var(--color);animation:svelte-qjpt5m-motion var(--duration) cubic-bezier(0.895, 0.03, 0.685, 0.22) infinite}@keyframes svelte-qjpt5m-motion{0%{opacity:1}50%{opacity:0}100%{opacity:1}}";
	append(document.head, style);
}

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (44:2) {#each range(3, 0) as version}
function create_each_block$7(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "cube svelte-qjpt5m");
			set_style(div, "animation-delay", /*version*/ ctx[6] * (/*durationNum*/ ctx[5] / 10) + /*durationUnit*/ ctx[4]);
			set_style(div, "left", /*version*/ ctx[6] * (/*size*/ ctx[0] / 3 + /*size*/ ctx[0] / 15) + /*unit*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div, "left", /*version*/ ctx[6] * (/*size*/ ctx[0] / 3 + /*size*/ ctx[0] / 15) + /*unit*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$f(ctx) {
	let div;
	let each_value = range(3, 0);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-qjpt5m");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range, durationNum, durationUnit, size, unit*/ 53) {
				each_value = range(3, 0);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1.5s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class Pulse extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-qjpt5m-style")) add_css$f();
		init(this, options, instance$f, create_fragment$f, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Jellyfish.svelte generated by Svelte v3.19.2 */

function add_css$g() {
	var style = element("style");
	style.id = "svelte-1a4ojx1-style";
	style.textContent = ".wrapper.svelte-1a4ojx1{position:relative;display:flex;justify-content:center;align-items:center;width:var(--size);height:var(--size)}.ring.svelte-1a4ojx1{position:absolute;border:2px solid var(--color);border-radius:50%;background-color:transparent;animation:svelte-1a4ojx1-motion var(--duration) ease infinite}@keyframes svelte-1a4ojx1-motion{0%{transform:translateY(var(--motionOne))}50%{transform:translateY(var(--motionTwo))}100%{transform:translateY(var(--motionThree))}}";
	append(document.head, style);
}

function get_each_context$8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (45:2) {#each range(6, 0) as version}
function create_each_block$8(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "ring svelte-1a4ojx1");
			set_style(div, "animation-delay", /*version*/ ctx[6] * (/*durationNum*/ ctx[5] / 25) + /*durationUnit*/ ctx[4]);
			set_style(div, "width", /*version*/ ctx[6] * (/*size*/ ctx[0] / 6) + /*unit*/ ctx[2]);
			set_style(div, "height", /*version*/ ctx[6] * (/*size*/ ctx[0] / 6) / 2 + /*unit*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div, "width", /*version*/ ctx[6] * (/*size*/ ctx[0] / 6) + /*unit*/ ctx[2]);
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "height", /*version*/ ctx[6] * (/*size*/ ctx[0] / 6) / 2 + /*unit*/ ctx[2]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$g(ctx) {
	let div;
	let each_value = range(6, 0);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "wrapper svelte-1a4ojx1");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--motionOne", -/*size*/ ctx[0] / 5 + /*unit*/ ctx[2]);
			set_style(div, "--motionTwo", /*size*/ ctx[0] / 4 + /*unit*/ ctx[2]);
			set_style(div, "--motionThree", -/*size*/ ctx[0] / 5 + /*unit*/ ctx[2]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range, durationNum, durationUnit, size, unit*/ 53) {
				each_value = range(6, 0);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$8(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$8(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--motionOne", -/*size*/ ctx[0] / 5 + /*unit*/ ctx[2]);
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--motionTwo", /*size*/ ctx[0] / 4 + /*unit*/ ctx[2]);
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--motionThree", -/*size*/ ctx[0] / 5 + /*unit*/ ctx[2]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "2.5s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class Jellyfish extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1a4ojx1-style")) add_css$g();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Chasing.svelte generated by Svelte v3.19.2 */

function add_css$h() {
	var style = element("style");
	style.id = "svelte-1rda9iq-style";
	style.textContent = ".wrapper.svelte-1rda9iq{height:var(--size);width:var(--size);display:flex;justify-content:center;align-items:center}.spinner.svelte-1rda9iq{height:var(--size);width:var(--size);animation:svelte-1rda9iq-rotate var(--duration) infinite linear}.dot.svelte-1rda9iq{width:60%;height:60%;display:inline-block;position:absolute;top:0;background-color:var(--color);border-radius:100%;animation:svelte-1rda9iq-bounce var(--duration) infinite ease-in-out}@keyframes svelte-1rda9iq-rotate{100%{transform:rotate(360deg)}}@keyframes svelte-1rda9iq-bounce{0%,100%{transform:scale(0)}50%{transform:scale(1)}}";
	append(document.head, style);
}

function get_each_context$9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (55:4) {#each range(2, 0) as version}
function create_each_block$9(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "dot svelte-1rda9iq");

			set_style(div, "animation-delay", /*version*/ ctx[6] === 1
			? `${/*durationNum*/ ctx[5] / 2}${/*durationUnit*/ ctx[4]}`
			: "0s");

			set_style(div, "bottom", /*version*/ ctx[6] === 1 ? "0" : "");
			set_style(div, "top", /*version*/ ctx[6] === 1 ? "auto" : "");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment$h(ctx) {
	let div1;
	let div0;
	let each_value = range(2, 0);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "spinner svelte-1rda9iq");
			attr(div1, "class", "wrapper svelte-1rda9iq");
			set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div1, "--color", /*color*/ ctx[1]);
			set_style(div1, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*range, durationNum, durationUnit*/ 48) {
				each_value = range(2, 0);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$9(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$9(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*size, unit*/ 5) {
				set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div1, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div1, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "2s" } = $$props;
	let durationUnit = duration.match(durationUnitRegex)[0];
	let durationNum = duration.replace(durationUnitRegex, "");

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, durationUnit, durationNum];
}

class Chasing extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1rda9iq-style")) add_css$h();
		init(this, options, instance$h, create_fragment$h, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Shadow.svelte generated by Svelte v3.19.2 */

function add_css$i() {
	var style = element("style");
	style.id = "svelte-vhggjq-style";
	style.textContent = ".wrapper.svelte-vhggjq{position:relative;display:flex;justify-content:center;align-items:center;width:var(--size);height:var(--size)}.shadow.svelte-vhggjq{color:var(--color);font-size:var(--size);overflow:hidden;width:var(--size);height:var(--size);border-radius:50%;margin:28px auto;position:relative;transform:translateZ(0);animation:svelte-vhggjq-load var(--duration) infinite ease, svelte-vhggjq-round var(--duration) infinite ease}@keyframes svelte-vhggjq-load{0%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,\r\n        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}5%,95%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,\r\n        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}10%,59%{box-shadow:0 -0.83em 0 -0.4em, -0.087em -0.825em 0 -0.42em,\r\n        -0.173em -0.812em 0 -0.44em, -0.256em -0.789em 0 -0.46em,\r\n        -0.297em -0.775em 0 -0.477em}20%{box-shadow:0 -0.83em 0 -0.4em, -0.338em -0.758em 0 -0.42em,\r\n        -0.555em -0.617em 0 -0.44em, -0.671em -0.488em 0 -0.46em,\r\n        -0.749em -0.34em 0 -0.477em}38%{box-shadow:0 -0.83em 0 -0.4em, -0.377em -0.74em 0 -0.42em,\r\n        -0.645em -0.522em 0 -0.44em, -0.775em -0.297em 0 -0.46em,\r\n        -0.82em -0.09em 0 -0.477em}100%{box-shadow:0 -0.83em 0 -0.4em, 0 -0.83em 0 -0.42em, 0 -0.83em 0 -0.44em,\r\n        0 -0.83em 0 -0.46em, 0 -0.83em 0 -0.477em}}@keyframes svelte-vhggjq-round{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}";
	append(document.head, style);
}

function create_fragment$i(ctx) {
	let div1;
	let div0;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			attr(div0, "class", "shadow svelte-vhggjq");
			attr(div1, "class", "wrapper svelte-vhggjq");
			set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div1, "--color", /*color*/ ctx[1]);
			set_style(div1, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div1, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div1, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div1, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

function instance$i($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1.7s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class Shadow extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-vhggjq-style")) add_css$i();
		init(this, options, instance$i, create_fragment$i, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Square.svelte generated by Svelte v3.19.2 */

function add_css$j() {
	var style = element("style");
	style.id = "svelte-igcne5-style";
	style.textContent = ".square.svelte-igcne5{height:var(--size);width:var(--size);background-color:var(--color);animation:svelte-igcne5-squareDelay var(--duration) 0s infinite cubic-bezier(0.09, 0.57, 0.49, 0.9);animation-fill-mode:both;perspective:100px;display:inline-block}@keyframes svelte-igcne5-squareDelay{25%{-webkit-transform:rotateX(180deg) rotateY(0);transform:rotateX(180deg) rotateY(0)}50%{-webkit-transform:rotateX(180deg) rotateY(180deg);transform:rotateX(180deg) rotateY(180deg)}75%{-webkit-transform:rotateX(0) rotateY(180deg);transform:rotateX(0) rotateY(180deg)}100%{-webkit-transform:rotateX(0) rotateY(0);transform:rotateX(0) rotateY(0)}}";
	append(document.head, style);
}

function create_fragment$j(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "square svelte-igcne5");
			set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div, "--color", /*color*/ ctx[1]);
			set_style(div, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$j($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "3s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class Square extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-igcne5-style")) add_css$j();
		init(this, options, instance$j, create_fragment$j, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Moon.svelte generated by Svelte v3.19.2 */

function add_css$k() {
	var style = element("style");
	style.id = "svelte-1z105v1-style";
	style.textContent = ".wrapper.svelte-1z105v1{height:var(--size);width:var(--size);border-radius:100%;animation:svelte-1z105v1-moonStretchDelay var(--duration) 0s infinite linear;animation-fill-mode:forwards;position:relative}.circle-one.svelte-1z105v1{top:var(--moonSize);background-color:var(--color);width:calc(var(--size) / 7);height:calc(var(--size) / 7);border-radius:100%;animation:svelte-1z105v1-moonStretchDelay var(--duration) 0s infinite linear;animation-fill-mode:forwards;opacity:0.8;position:absolute}.circle-two.svelte-1z105v1{opacity:0.1;border:calc(var(--size) / 7) solid var(--color);height:var(--size);width:var(--size);border-radius:100%;box-sizing:border-box}@keyframes svelte-1z105v1-moonStretchDelay{100%{transform:rotate(360deg)}}";
	append(document.head, style);
}

function create_fragment$k(ctx) {
	let div2;
	let div0;
	let t;
	let div1;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			attr(div0, "class", "circle-one svelte-1z105v1");
			attr(div1, "class", "circle-two svelte-1z105v1");
			attr(div2, "class", "wrapper svelte-1z105v1");
			set_style(div2, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div2, "--color", /*color*/ ctx[1]);
			set_style(div2, "--moonSize", /*top*/ ctx[4] + /*unit*/ ctx[2]);
			set_style(div2, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div2, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div2, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*unit*/ 4) {
				set_style(div2, "--moonSize", /*top*/ ctx[4] + /*unit*/ ctx[2]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div2, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "0.6s" } = $$props;
	let moonSize = size / 7;
	let top = size / 2 - moonSize / 2;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration, top];
}

class Moon extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1z105v1-style")) add_css$k();
		init(this, options, instance$k, create_fragment$k, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Plane.svelte generated by Svelte v3.19.2 */

function add_css$l() {
	var style = element("style");
	style.id = "svelte-18ymnss-style";
	style.textContent = ".wrapper.svelte-18ymnss.svelte-18ymnss{height:var(--size);width:var(--size);position:relative;display:flex;justify-content:center;align-items:center}.wrapper.svelte-18ymnss .svelte-18ymnss{line-height:0;box-sizing:border-box}.spinner-inner.svelte-18ymnss.svelte-18ymnss{height:var(--size);width:var(--size);transform:scale(calc(var(--size) / 70))}.mask.svelte-18ymnss.svelte-18ymnss{position:absolute;border-radius:2px;overflow:hidden;perspective:1000;backface-visibility:hidden}.plane.svelte-18ymnss.svelte-18ymnss{background:var(--color);width:400%;height:100%;position:absolute;z-index:100;perspective:1000;backface-visibility:hidden}#top.svelte-18ymnss .plane.svelte-18ymnss{z-index:2000;animation:svelte-18ymnss-trans1 var(--duration) ease-in infinite 0s backwards}#middle.svelte-18ymnss .plane.svelte-18ymnss{transform:translate3d(0px, 0, 0);background:var(--rgba);animation:svelte-18ymnss-trans2 var(--duration) linear infinite calc(var(--duration)/4) backwards}#bottom.svelte-18ymnss .plane.svelte-18ymnss{z-index:2000;animation:svelte-18ymnss-trans3 var(--duration) ease-out infinite calc(var(--duration)/2) backwards}#top.svelte-18ymnss.svelte-18ymnss{width:53px;height:20px;left:20px;top:5px;transform:skew(-15deg, 0);z-index:100}#middle.svelte-18ymnss.svelte-18ymnss{width:33px;height:20px;left:20px;top:21px;transform:skew(-15deg, 40deg)}#bottom.svelte-18ymnss.svelte-18ymnss{width:53px;height:20px;top:35px;transform:skew(-15deg, 0)}@keyframes svelte-18ymnss-trans1{from{transform:translate3d(53px, 0, 0)}to{transform:translate3d(-250px, 0, 0)}}@keyframes svelte-18ymnss-trans2{from{transform:translate3d(-160px, 0, 0)}to{transform:translate3d(53px, 0, 0)}}@keyframes svelte-18ymnss-trans3{from{transform:translate3d(53px, 0, 0)}to{transform:translate3d(-220px, 0, 0)}}";
	append(document.head, style);
}

function create_fragment$l(ctx) {
	let div7;
	let div6;

	return {
		c() {
			div7 = element("div");
			div6 = element("div");

			div6.innerHTML = `<div id="top" class="mask svelte-18ymnss"><div class="plane svelte-18ymnss"></div></div> 
    <div id="middle" class="mask svelte-18ymnss"><div class="plane svelte-18ymnss"></div></div> 
    <div id="bottom" class="mask svelte-18ymnss"><div class="plane svelte-18ymnss"></div></div>`;

			attr(div6, "class", "spinner-inner svelte-18ymnss");
			attr(div7, "class", "wrapper svelte-18ymnss");
			set_style(div7, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(div7, "--color", /*color*/ ctx[1]);
			set_style(div7, "--rgba", /*rgba*/ ctx[4]);
			set_style(div7, "--duration", /*duration*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div6);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(div7, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(div7, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*rgba*/ 16) {
				set_style(div7, "--rgba", /*rgba*/ ctx[4]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(div7, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div7);
		}
	};
}

function instance$l($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1.3s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	let rgba;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*color*/ 2) {
			 $$invalidate(4, rgba = calculateRgba(color, 0.6));
		}
	};

	return [size, color, unit, duration, rgba];
}

class Plane extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-18ymnss-style")) add_css$l();
		init(this, options, instance$l, create_fragment$l, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

/* src\Diamonds.svelte generated by Svelte v3.19.2 */

function add_css$m() {
	var style = element("style");
	style.id = "svelte-156enpk-style";
	style.textContent = "span.svelte-156enpk{width:var(--size);height:calc(var(--size) / 4);position:relative}div.svelte-156enpk{width:calc(var(--size) / 4);height:calc(var(--size) / 4);position:absolute;left:0;top:0;border-radius:2px;background:var(--color);transform:translateX(-50%) rotate(45deg) scale(0);animation:svelte-156enpk-diamonds var(--duration) linear infinite}div.svelte-156enpk:nth-child(1){animation-delay:calc(var(--duration)*2/3*-1)}div.svelte-156enpk:nth-child(2){animation-delay:calc(var(--duration)*2/3*-2)}div.svelte-156enpk:nth-child(3){animation-delay:calc(var(--duration)*2/3*-3)}@keyframes svelte-156enpk-diamonds{50%{left:50%;transform:translateX(-50%) rotate(45deg) scale(1)}100%{left:100%;transform:translateX(-50%) rotate(45deg) scale(0)}}";
	append(document.head, style);
}

function create_fragment$m(ctx) {
	let span;
	let div0;
	let t0;
	let div1;
	let t1;
	let div2;

	return {
		c() {
			span = element("span");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = space();
			div2 = element("div");
			attr(div0, "class", "svelte-156enpk");
			attr(div1, "class", "svelte-156enpk");
			attr(div2, "class", "svelte-156enpk");
			set_style(span, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			set_style(span, "--color", /*color*/ ctx[1]);
			set_style(span, "--duration", /*duration*/ ctx[3]);
			attr(span, "class", "svelte-156enpk");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, div0);
			append(span, t0);
			append(span, div1);
			append(span, t1);
			append(span, div2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*size, unit*/ 5) {
				set_style(span, "--size", /*size*/ ctx[0] + /*unit*/ ctx[2]);
			}

			if (dirty & /*color*/ 2) {
				set_style(span, "--color", /*color*/ ctx[1]);
			}

			if (dirty & /*duration*/ 8) {
				set_style(span, "--duration", /*duration*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function instance$m($$self, $$props, $$invalidate) {
	let { size = 60 } = $$props;
	let { color = "#FF3E00" } = $$props;
	let { unit = "px" } = $$props;
	let { duration = "1.5s" } = $$props;

	$$self.$set = $$props => {
		if ("size" in $$props) $$invalidate(0, size = $$props.size);
		if ("color" in $$props) $$invalidate(1, color = $$props.color);
		if ("unit" in $$props) $$invalidate(2, unit = $$props.unit);
		if ("duration" in $$props) $$invalidate(3, duration = $$props.duration);
	};

	return [size, color, unit, duration];
}

class Diamonds extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-156enpk-style")) add_css$m();
		init(this, options, instance$m, create_fragment$m, safe_not_equal, { size: 0, color: 1, unit: 2, duration: 3 });
	}
}

export { BarLoader, Chasing, Circle, Circle2, Circle3, Diamonds, DoubleBounce, Firework, GoogleSpin, Jellyfish, Jumper, Moon, Plane, Pulse, Rainbow, RingLoader, ScaleOut, Shadow, SpinLine, Square, Stretch, SyncLoader, Wave };
